@page "/"
@using SnapDog2.WebUi.ApiClient
@inject ISnapDogApiClient ApiClient
@implements IAsyncDisposable

<PageTitle>SnapDog2</PageTitle>

<div class="zones-container">
    <h1 class="text-h1">üéµ SnapDog2 Multi-Room Audio</h1>
    
    @if (totalZones > 0 || totalClients > 0)
    {
        <div class="system-status">
            <p class="text-body">
                üìä System: @totalZones zones configured, @totalClients clients available
                @if (isLoading) { <span> - Loading controls...</span> }
            </p>
        </div>
    }
    
    @if (isLoading && totalZones == 0)
    {
        <div class="loading-section">
            <p class="text-body">Loading system...</p>
        </div>
    }
    else if (totalZones > 0)
    {
        <div class="zones-grid">
            @for (int i = 1; i <= totalZones; i++)
            {
                var zoneIndex = i;
                <div class="zone-section" @key="zoneIndex" @ondrop="@((e) => HandleDrop(e, zoneIndex))" @ondragover="@HandleDragOver">
                    <h2 class="text-h2">üéµ Zone @zoneIndex</h2>
                    
                    @if (zoneControls.ContainsKey(zoneIndex))
                    {
                        var controls = zoneControls[zoneIndex];
                        <div class="zone-controls">
                            <div class="media-info">
                                <p class="text-body">Volume: @controls.Volume% | Muted: @controls.IsMuted | Tracks: @controls.PlaylistCount</p>
                            </div>
                            
                            <div class="control-buttons">
                                <button @onclick="() => ToggleMute(zoneIndex)">üîá</button>
                                <button @onclick="() => Play(zoneIndex)">‚ñ∂Ô∏è</button>
                                <button @onclick="() => Pause(zoneIndex)">‚è∏Ô∏è</button>
                                <button @onclick="() => NextTrack(zoneIndex)">‚è≠Ô∏è</button>
                                <button @onclick="() => PreviousTrack(zoneIndex)">‚èÆÔ∏è</button>
                            </div>
                            
                            <div class="volume-control">
                                <input type="range" min="0" max="100" value="@controls.Volume" 
                                       @onchange="HandleVolumeChange" data-zone="@zoneIndex" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-small">Loading zone controls...</p>
                    }
                    
                    <!-- Client Management Zone -->
                    <div class="client-management">
                        <h3 class="text-h3">Clients</h3>
                        <div class="client-chips">
                            @if (clientsInZone.ContainsKey(zoneIndex))
                            {
                                @foreach (var client in clientsInZone[zoneIndex])
                                {
                                    <div class="client-chip" draggable="true" 
                                         @ondragstart="@((e) => HandleDragStart(e, client.Index))"
                                         @key="client.Index">
                                        <div class="status-indicator @(client.IsConnected ? "status-connected" : "status-disconnected")"></div>
                                        <span class="text-h3">Client @client.Index</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!isLoading)
    {
        <div class="no-zones">
            <h2 class="text-h2">No Zones Available</h2>
            <p class="text-body">No audio zones are currently configured.</p>
        </div>
    }
</div>

<style>
.zones-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.system-status {
    background: var(--color-surface, #f8fafc);
    border: 1px solid var(--color-border, #e2e8f0);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 2rem;
}

.zones-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
}

.zone-section {
    background: var(--color-surface, #f8fafc);
    border: 1px solid var(--color-border, #e2e8f0);
    border-radius: 8px;
    padding: 1.5rem;
    min-height: 300px;
}

.zone-section.drag-over {
    border-color: var(--color-primary, #2563eb);
    background: rgba(37, 99, 235, 0.1);
}

.zone-controls {
    margin-bottom: 1.5rem;
}

.control-buttons {
    display: flex;
    gap: 0.5rem;
    margin: 1rem 0;
}

.control-buttons button {
    padding: 0.5rem;
    border: 1px solid var(--color-border, #e2e8f0);
    border-radius: 4px;
    background: var(--color-background, #ffffff);
    cursor: pointer;
}

.volume-control {
    margin: 1rem 0;
}

.volume-control input[type="range"] {
    width: 100%;
}

.client-management {
    border-top: 1px solid var(--color-border, #e2e8f0);
    padding-top: 1rem;
}

.client-chips {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    min-height: 60px;
    padding: 0.5rem;
    border: 2px dashed var(--color-border, #e2e8f0);
    border-radius: 6px;
}

.client-chip {
    display: inline-flex;
    align-items: center;
    background: var(--color-background, #ffffff);
    border: 1px solid var(--color-border, #e2e8f0);
    border-radius: 6px;
    padding: 0.5rem 1rem;
    cursor: grab;
    font-family: 'Orbitron', sans-serif;
    user-select: none;
}

.client-chip:active {
    cursor: grabbing;
}

.status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    margin-right: 0.5rem;
}

.status-connected {
    background-color: #10b981;
}

.status-disconnected {
    background-color: #ef4444;
}

.text-h1 {
    font-family: 'Orbitron', sans-serif;
    font-size: 1.875rem;
    font-weight: 600;
    line-height: 1.3;
    margin-bottom: 2rem;
}

.text-h2 {
    font-family: 'Orbitron', sans-serif;
    font-size: 1.5rem;
    font-weight: 500;
    line-height: 1.4;
    margin-bottom: 1rem;
}

.text-h3 {
    font-family: 'Orbitron', sans-serif;
    font-size: 1.25rem;
    font-weight: 500;
    line-height: 1.4;
}

.text-body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1.6;
}

.text-small {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
    font-size: 0.875rem;
    font-weight: 400;
    line-height: 1.5;
}
</style>

@code {
    private bool isLoading = true;
    private int totalZones = 0;
    private int totalClients = 0;
    private Dictionary<int, ZoneControls> zoneControls = new();
    private Dictionary<int, List<ClientInfo>> clientsInZone = new();
    private int draggedClientIndex = -1;

    public class ZoneControls
    {
        public int Volume { get; set; }
        public bool IsMuted { get; set; }
        public int PlaylistCount { get; set; }
    }

    public class ClientInfo
    {
        public int Index { get; set; }
        public bool IsConnected { get; set; }
        public int ZoneIndex { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSystem();
        await ApiClient.StartRealtimeUpdatesAsync();
    }

    private async Task LoadSystem()
    {
        try
        {
            isLoading = true;
            
            // Load counts first for immediate feedback
            var countsTask = Task.WhenAll(
                ApiClient.GetZonesCountAsync(),
                ApiClient.GetClientsCountAsync()
            );
            
            var counts = await countsTask;
            totalZones = counts[0];
            totalClients = counts[1];
            
            // Initialize client zones dictionary
            for (int i = 1; i <= totalZones; i++)
            {
                clientsInZone[i] = new List<ClientInfo>();
            }
            
            // Trigger UI update with counts
            StateHasChanged();
            
            // Load zone controls and client assignments in parallel
            var tasks = new List<Task>();
            
            // Load zone controls
            for (int i = 1; i <= totalZones; i++)
            {
                var zoneIndex = i;
                tasks.Add(LoadZoneControls(zoneIndex));
            }
            
            // Load client assignments
            for (int i = 1; i <= totalClients; i++)
            {
                var clientIndex = i;
                tasks.Add(LoadClientAssignment(clientIndex));
            }
            
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading system: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadZoneControls(int zoneIndex)
    {
        try
        {
            var volume = await ApiClient.GetZoneVolumeAsync(zoneIndex);
            var isMuted = await ApiClient.GetZoneMuteAsync(zoneIndex);
            var playlistCount = await ApiClient.GetZonePlaylistCountAsync(zoneIndex);
            
            zoneControls[zoneIndex] = new ZoneControls
            {
                Volume = volume,
                IsMuted = isMuted,
                PlaylistCount = playlistCount
            };
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading zone {zoneIndex} controls: {ex.Message}");
        }
    }

    private async Task LoadClientAssignment(int clientIndex)
    {
        try
        {
            var zoneIndex = await ApiClient.GetClientZoneAsync(clientIndex);
            
            var clientInfo = new ClientInfo
            {
                Index = clientIndex,
                IsConnected = true, // Assume connected for now
                ZoneIndex = zoneIndex
            };
            
            if (clientsInZone.ContainsKey(zoneIndex))
            {
                clientsInZone[zoneIndex].Add(clientInfo);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading client {clientIndex} assignment: {ex.Message}");
        }
    }

    private async Task HandleVolumeChange(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var volume))
        {
            // Get zone index from the event target (simplified approach)
            // In a real implementation, you'd pass the zone index differently
            foreach (var kvp in zoneControls)
            {
                await SetVolume(kvp.Key, volume);
                break; // For now, just update the first zone
            }
        }
    }

    // Zone control methods
    private async Task SetVolume(int zoneIndex, int volume)
    {
        try
        {
            await ApiClient.SetZoneVolumeAsync(zoneIndex, volume);
            if (zoneControls.ContainsKey(zoneIndex))
            {
                zoneControls[zoneIndex].Volume = volume;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting volume: {ex.Message}");
        }
    }

    private async Task ToggleMute(int zoneIndex)
    {
        try
        {
            await ApiClient.ToggleZoneMuteAsync(zoneIndex);
            if (zoneControls.ContainsKey(zoneIndex))
            {
                zoneControls[zoneIndex].IsMuted = !zoneControls[zoneIndex].IsMuted;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling mute: {ex.Message}");
        }
    }

    private async Task Play(int zoneIndex)
    {
        try
        {
            await ApiClient.PlayZoneAsync(zoneIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error playing: {ex.Message}");
        }
    }

    private async Task Pause(int zoneIndex)
    {
        try
        {
            await ApiClient.PauseZoneAsync(zoneIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error pausing: {ex.Message}");
        }
    }

    private async Task NextTrack(int zoneIndex)
    {
        try
        {
            await ApiClient.NextTrackAsync(zoneIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error next track: {ex.Message}");
        }
    }

    private async Task PreviousTrack(int zoneIndex)
    {
        try
        {
            await ApiClient.PreviousTrackAsync(zoneIndex);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error previous track: {ex.Message}");
        }
    }

    // Drag and drop methods
    private void HandleDragStart(DragEventArgs e, int clientIndex)
    {
        draggedClientIndex = clientIndex;
        e.DataTransfer.EffectAllowed = "move";
    }

    private void HandleDragOver(DragEventArgs e)
    {
        e.DataTransfer.DropEffect = "move";
    }

    private async Task HandleDrop(DragEventArgs e, int targetZoneIndex)
    {
        if (draggedClientIndex == -1) return;
        
        try
        {
            // Find current zone of dragged client
            var currentZone = -1;
            ClientInfo? draggedClient = null;
            
            foreach (var kvp in clientsInZone)
            {
                var client = kvp.Value.FirstOrDefault(c => c.Index == draggedClientIndex);
                if (client != null)
                {
                    currentZone = kvp.Key;
                    draggedClient = client;
                    break;
                }
            }
            
            if (draggedClient != null && currentZone != targetZoneIndex)
            {
                // Call API to reassign client
                await ApiClient.AssignClientToZoneAsync(draggedClientIndex, targetZoneIndex);
                
                // Update UI optimistically
                if (currentZone != -1 && clientsInZone.ContainsKey(currentZone))
                {
                    clientsInZone[currentZone].Remove(draggedClient);
                }
                
                draggedClient.ZoneIndex = targetZoneIndex;
                if (clientsInZone.ContainsKey(targetZoneIndex))
                {
                    clientsInZone[targetZoneIndex].Add(draggedClient);
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error moving client: {ex.Message}");
            // TODO: Revert optimistic update on error
        }
        finally
        {
            draggedClientIndex = -1;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ApiClient.StopRealtimeUpdatesAsync();
    }
}
