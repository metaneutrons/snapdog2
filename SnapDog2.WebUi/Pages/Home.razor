@page "/"
@using SnapDog2.WebUi.ApiClient
@using SnapDog2.WebUi.ApiClient.Models
@using SnapDog2.WebUi.ApiClient.Generated
@inject ISnapDogApiClient ApiClient

<PageTitle>SnapDog2 WebUI</PageTitle>

<div class="zones-container">
    <h1 class="text-h1">ðŸŽµ SnapDog2 Multi-Room Audio</h1>
    
    @if (isLoading)
    {
        <div class="zone-section">
            <p class="text-body">Loading zones...</p>
        </div>
    }
    else if (zones?.Any() == true)
    {
        @foreach (var zone in zones)
        {
            <ZoneSection Zone="zone" OnZoneChanged="RefreshZones" @key="zone.Index" />
        }
    }
    else
    {
        <div class="zone-section">
            <h2 class="text-h2">No Zones Available</h2>
            <p class="text-body">No audio zones are currently configured or available.</p>
        </div>
    }
</div>

@code {
    private List<WebUiZoneState>? zones;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadZones();
    }

    private async Task LoadZones()
    {
        try
        {
            isLoading = true;
            
            // Load zones and clients in parallel
            var zonesTask = ApiClient.GetAllZonesAsync();
            var clientsTask = ApiClient.GetAllClientsAsync();
            
            await Task.WhenAll(zonesTask, clientsTask);
            
            var zoneArray = zonesTask.Result ?? Array.Empty<ZoneState>();
            var clientArray = clientsTask.Result ?? Array.Empty<ClientState>();
            
            // Create WebUI adapter objects
            zones = zoneArray.Select((zone, index) => 
                new WebUiZoneState(zone, index, clientArray)).ToList();
        }
        catch (Exception)
        {
            // Log error and show fallback
            zones = new List<WebUiZoneState>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshZones(WebUiZoneState updatedZone)
    {
        await LoadZones();
        StateHasChanged();
    }
}
