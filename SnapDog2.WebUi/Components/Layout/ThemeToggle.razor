@inject IJSRuntime JS

<div class="theme-toggle" @onclick="ToggleTheme" title="Toggle theme">
    @if (isDarkMode)
    {
        <span>‚òÄÔ∏è</span>
    }
    else
    {
        <span>üåô</span>
    }
</div>

<script>
    window.themeHelpers = {
        getTheme: () => {
            const stored = localStorage.getItem('theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            return stored || (prefersDark ? 'dark' : 'light');
        },
        setTheme: (theme) => {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
        },
        initTheme: () => {
            const theme = window.themeHelpers.getTheme();
            window.themeHelpers.setTheme(theme);
            return theme === 'dark';
        }
    };
    
    window.setDragData = (data) => window.dragData = data;
    window.getDragData = () => window.dragData || '';
</script>

@code {
    private bool isDarkMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await JS.InvokeAsync<bool>("themeHelpers.initTheme");
            StateHasChanged();
        }
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        var theme = isDarkMode ? "dark" : "light";
        await JS.InvokeVoidAsync("themeHelpers.setTheme", theme);
    }
}
