@using SnapDog2.WebUi.ApiClient

<div class="zone-section">
    <h2 class="text-h2">@Zone.Name</h2>
    
    @if (Zone.CurrentTrack != null)
    {
        <div class="media-controls">
            <div class="track-info">
                <div class="text-h3">@Zone.CurrentTrack.Title</div>
                <div class="text-body">@Zone.CurrentTrack.Artist - @Zone.CurrentTrack.Album</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @GetProgressPercentage()%"></div>
                </div>
                <div class="text-small">@FormatTime(Zone.CurrentTrack.Position) / @FormatTime(Zone.CurrentTrack.Duration)</div>
            </div>
            
            <div class="transport-controls">
                <button class="control-button" @onclick="() => OnPreviousTrack.InvokeAsync(Zone.Index)">
                    ‚èÆÔ∏è
                </button>
                <button class="control-button" @onclick="() => OnPlayPause.InvokeAsync((Zone.Index, Zone.IsPlaying))">
                    @(Zone.IsPlaying ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è")
                </button>
                <button class="control-button" @onclick="() => OnNextTrack.InvokeAsync(Zone.Index)">
                    ‚è≠Ô∏è
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="media-controls">
            <div class="track-info">
                <div class="text-body">No track playing</div>
            </div>
            <div class="transport-controls">
                <button class="control-button" disabled>‚èÆÔ∏è</button>
                <button class="control-button" disabled>‚ñ∂Ô∏è</button>
                <button class="control-button" disabled>‚è≠Ô∏è</button>
            </div>
        </div>
    }
    
    <div class="volume-control">
        <button class="control-button" @onclick="() => OnMuteToggled.InvokeAsync(Zone.Index)">
            @(Zone.IsMuted ? "üîá" : "üîä")
        </button>
        <input type="range" 
               class="volume-slider" 
               min="0" 
               max="100" 
               value="@Zone.Volume" 
               @onchange="HandleVolumeChange" />
        <span class="text-small">@Zone.Volume%</span>
    </div>
    
    <div class="clients-zone">
        <h3 class="text-h3">Clients (@Clients.Length)</h3>
        <div class="clients-grid @(isDragOver ? "drag-over" : "")"
             @ondrop="HandleDrop"
             @ondragover="HandleDragOver"
             @ondragenter="HandleDragEnter"
             @ondragleave="HandleDragLeave">
            
            @foreach (var client in Clients)
            {
                <ClientChip Client="client" 
                           OnDragStart="HandleClientDragStart"
                           @key="client.Index" />
            }
            
            @* Show unassigned clients in a special "Unassigned" zone *@
            @if (Zone.Index == 0) 
            {
                @foreach (var client in AllClients.Where(c => c.ZoneIndex == null))
                {
                    <ClientChip Client="client" 
                               OnDragStart="HandleClientDragStart"
                               @key="client.Index" />
                }
            }
            
            @if (!Clients.Any() && Zone.Index != 0)
            {
                <div class="text-small" style="color: var(--color-text-secondary); padding: 1rem;">
                    Drop clients here to assign them to this zone
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public ZoneState Zone { get; set; } = null!;
    [Parameter] public ClientState[] Clients { get; set; } = Array.Empty<ClientState>();
    [Parameter] public ClientState[] AllClients { get; set; } = Array.Empty<ClientState>();
    [Parameter] public EventCallback<(int clientIndex, int targetZoneIndex)> OnClientMoved { get; set; }
    [Parameter] public EventCallback<(int zoneIndex, int volume)> OnVolumeChanged { get; set; }
    [Parameter] public EventCallback<int> OnMuteToggled { get; set; }
    [Parameter] public EventCallback<(int zoneIndex, bool isPlaying)> OnPlayPause { get; set; }
    [Parameter] public EventCallback<int> OnNextTrack { get; set; }
    [Parameter] public EventCallback<int> OnPreviousTrack { get; set; }

    private bool isDragOver = false;
    private int? draggedClientIndex;

    private double GetProgressPercentage()
    {
        if (Zone.CurrentTrack == null || Zone.CurrentTrack.Duration.TotalSeconds == 0)
            return 0;
        
        return (Zone.CurrentTrack.Position.TotalSeconds / Zone.CurrentTrack.Duration.TotalSeconds) * 100;
    }

    private string FormatTime(TimeSpan time)
    {
        return time.ToString(@"mm\:ss");
    }

    private async Task HandleVolumeChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var volume))
        {
            await OnVolumeChanged.InvokeAsync((Zone.Index, volume));
        }
    }

    private void HandleClientDragStart(int clientIndex)
    {
        draggedClientIndex = clientIndex;
    }

    private void HandleDragOver(DragEventArgs e)
    {
        // Prevent default to allow drop
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        isDragOver = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        isDragOver = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragOver = false;
        
        if (draggedClientIndex.HasValue)
        {
            await OnClientMoved.InvokeAsync((draggedClientIndex.Value, Zone.Index));
            draggedClientIndex = null;
        }
    }
}
