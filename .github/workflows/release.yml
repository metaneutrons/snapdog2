name: Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - "v*.*.*"

env:
  DOTNET_VERSION: "9.0.301"
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build native binaries for multiple architectures
  build-native:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: linux-x64
          - os: ubuntu-latest
            runtime: linux-arm64
            artifact-name: linux-arm64

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.x"

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1
        with:
          configFilePath: 'GitVersion.yml'
          updateAssemblyInfo: true

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore --verbosity minimal

      - name: Build
        run: dotnet build --configuration Release --no-restore --verbosity minimal

      - name: Test (x64 only)
        if: matrix.runtime == 'linux-x64'
        run: |
          dotnet test --configuration Release --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test-results.trx"

      - name: Publish application (self-contained for packaging)
        run: |
          dotnet publish ./SnapDog2/SnapDog2.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            --output ./publish/${{ matrix.runtime }} \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Publish application (framework-dependent for Docker)
        if: matrix.runtime == 'linux-x64' || matrix.runtime == 'linux-arm64'
        run: |
          dotnet publish ./SnapDog2/SnapDog2.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained false \
            --output ./publish-docker/${{ matrix.runtime }} \
            -p:UseAppHost=false \
            -p:PublishTrimmed=false \
            -p:PublishReadyToRun=false

      - name: Create release archive (self-contained)
        run: |
          cd publish/${{ matrix.runtime }}
          tar -czf ../../snapdog2-${{ steps.gitversion.outputs.semVer }}-${{ matrix.artifact-name }}.tar.gz *
          cd ../..

      - name: Create Docker archive (framework-dependent)
        if: matrix.runtime == 'linux-x64' || matrix.runtime == 'linux-arm64'
        run: |
          cd publish-docker/${{ matrix.runtime }}
          tar -czf ../../snapdog2-docker-${{ steps.gitversion.outputs.semVer }}-${{ matrix.artifact-name }}.tar.gz *
          cd ../..

      - name: Upload build artifacts (self-contained)
        uses: actions/upload-artifact@v4
        with:
          name: snapdog2-${{ matrix.artifact-name }}-${{ steps.gitversion.outputs.semVer }}
          path: snapdog2-${{ steps.gitversion.outputs.semVer }}-${{ matrix.artifact-name }}.tar.gz
          retention-days: 7

      - name: Upload Docker artifacts (framework-dependent)
        if: matrix.runtime == 'linux-x64' || matrix.runtime == 'linux-arm64'
        uses: actions/upload-artifact@v4
        with:
          name: snapdog2-docker-${{ matrix.artifact-name }}-${{ steps.gitversion.outputs.semVer }}
          path: snapdog2-docker-${{ steps.gitversion.outputs.semVer }}-${{ matrix.artifact-name }}.tar.gz
          retention-days: 7

  # Build and push Docker images for multiple architectures
  build-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.x"

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1
        with:
          configFilePath: 'GitVersion.yml'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.gitversion.outputs.semVer }}

  # Create GitHub Release
  release:
    needs: [build-native, build-docker]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.0.1
        with:
          versionSpec: "6.x"

      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.0.1
        with:
          configFilePath: 'GitVersion.yml'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: SnapDog2 ${{ steps.gitversion.outputs.semVer }}
          body: |
            ## SnapDog2 ${{ steps.gitversion.outputs.semVer }}
            
            ### ðŸŽµ Smart Home Audio Controller
            
            **Release Notes:**
            - Multi-room audio streaming with Snapcast
            - MQTT and KNX integration
            - RESTful API for home automation
            
            **Native Binaries:**
            - `snapdog2-${{ steps.gitversion.outputs.semVer }}-linux-x64.tar.gz` - Linux x64
            - `snapdog2-${{ steps.gitversion.outputs.semVer }}-linux-arm64.tar.gz` - Linux ARM64 (Raspberry Pi)
            
            **Docker Images:**
            ```bash
            # x64 systems
            docker run -d --name snapdog2 \
              -p 5000:5000 \
              -v $(pwd)/config:/app/config \
              ghcr.io/metaneutrons/snapdog2:${{ steps.gitversion.outputs.semVer }}
            
            # ARM64 systems (Raspberry Pi)
            docker run -d --name snapdog2 \
              -p 5000:5000 \
              -v $(pwd)/config:/app/config \
              --platform linux/arm64 \
              ghcr.io/metaneutrons/snapdog2:${{ steps.gitversion.outputs.semVer }}
            ```
            
            **Installation:**
            1. Download the appropriate archive for your architecture
            2. Extract: `tar -xzf snapdog2-*.tar.gz`
            3. Configure your environment variables
            4. Run: `./SnapDog2`
            
            For full documentation, visit the [project repository](https://github.com/metaneutrons/snapdog2).
          files: |
            ./artifacts/*/snapdog2-*.tar.gz
          draft: false
          prerelease: ${{ contains(steps.gitversion.outputs.semVer, '-') }}
          generate_release_notes: true
